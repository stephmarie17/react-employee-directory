{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["styles","cardStyle","width","Card","name","photo","position","email","id","className","style","alt","src","CardList","employees","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","target","value","onSortedChange","evt","currentTarget","getAttribute","undefined","sorted","console","log","sortEmployees","sortType","filteredEmployees","Error","isASC","sort","a","b","aFormatted","split","bFormatted","secondVal","localeCompare","filter","employee","toLowerCase","includes","sortedEmployees","length","onClick","icon","faArrowDown","faArrowUp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.964a2427.chunk.js","sourcesContent":["import React from 'react';\n\nconst styles = {\n    cardStyle: {\n        width: '18rem'\n    }\n};\n\nconst Card = ({ name, photo, position, email, id }) => {\n    return (\n        <div className='cards'>\n        <div className='card' style={styles.cardStyle}>\n            <img alt='employee' src={photo} className='card-img-top'/>\n            <div className='card-body'>\n                <h2>{name}</h2>\n                <p>{position}</p>\n                <p>{email}</p>\n            </div>\n        </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ employees }) => {\n    return (\n        <div>\n            {\n            employees.map((user, i) => {\n                return (\n                    <Card \n                    key={i} \n                    id={employees[i].id} \n                    photo={employees[i].photo}\n                    name={employees[i].name} \n                    position={employees[i].position}\n                    email={employees[i].email}\n                    />\n                );  \n            })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange, name}) => {\n    return (\n    <div className='form-group'>\n        <input\n            name={name}\n            className='form-control' \n            type=\"search\" \n            placeholder=\"search employees\" \n            onChange={searchChange}\n            />\n    </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid white', height: '600px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. Something went wrong!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport employees from \"../employees.json\";\nimport './App.css';\nimport {faArrowDown, faArrowUp} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            employees,\n            searchfield: '',\n            sorted: undefined //undefined || ASC || DESC\n        }\n    }\n\n    onChange = ({target:{name, value}}) => {\n        this.setState({ [name]: value });\n    }\n\n    onSortedChange = (evt) => {\n        const name = evt.currentTarget.getAttribute('name');\n        const value = this.state.sorted === undefined ?  'ASC' : this.state.sorted === 'ASC' ? 'DESC' : undefined; \n        console.log(name, value)\n        this.setState({ 'sorted': value });\n    }\n\n    // Sort method\n    sortEmployees = (sortType, filteredEmployees) => {\n        if(sortType === undefined) throw new Error('Sort type cannot be undefined');\n        const isASC = sortType === 'ASC';\n        filteredEmployees.sort((a,b) => {\n            const aFormatted = a.name.split(' ')[1];\n            const bFormatted = b.name.split(' ')[1];\n            const firstVal = isASC ? aFormatted : bFormatted;\n            const secondVal = isASC ? bFormatted : aFormatted;\n            return firstVal.localeCompare(secondVal);\n        });\n    }\n\n    render() {\n        const { employees, searchfield, sorted } = this.state;\n        console.log('sorted', sorted);\n        const filteredEmployees = employees.filter(employee => {\n            return employee.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        const sortedEmployees = this.state.sorted === undefined ? filteredEmployees : this.sortEmployees(this.state.sorted, filteredEmployees);\n        console.log(sortedEmployees);\n        return (!employees.length) ?\n            <h1>Loading...</h1> :\n            (\n                <div className='tc'>\n                <h1 className='f1'>Employee Directory</h1>\n                    <SearchBox name={'searchfield'} searchChange={this.onChange}/>\n                    <p className=\"show-sort\">Sort</p>\n                    <FontAwesomeIcon name={'sorted'} onClick={this.onSortedChange} icon={faArrowDown} />\n                    <FontAwesomeIcon name={'sorted'} onClick={this.onSortedChange} icon={faArrowUp} />\n\n                    <Scroll>\n                        <ErrorBoundary>                        \n                        <CardList employees={filteredEmployees}/>\n                        </ErrorBoundary>\n                    </Scroll> \n                </div>\n            );\n        }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}